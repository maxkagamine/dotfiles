#!/bin/bash
#
# Copyright (c) Max Kagamine
# Licensed under the Apache License, Version 2.0
#
# This wrapper script for cronjobs does several things:
#
# 1. Prevent a new instance from starting while the job is already running,
#    similar to wrapping with `flock` or `run-one`.
#
# 2. Append to a log file, with timestamps, truncating it to a set number of
#    lines before starting (so the latest run's full output is always present)
#
# 3. Send a notification if the command fails, using notify-send. In WSL, I use
#    https://github.com/stuartleeks/wsl-notify-send to trigger a Windows
#    notification.
#
# 4. If DISABLE_ON_ERROR is set, disables the cronjob on failure. Useful as a
#    circuit breaker for scripts that run every minute like the example below.
#
# Examples:
#
#   0 0 */3 * * /home/max/.local/bin/cron-wrapper /mnt/s/Videos/YouTube\ Playlists/download-youtube-playlists.sh
#   * * *   * * DISABLE_ON_ERROR=1 /home/max/.local/bin/cron-wrapper /home/max/.local/bin/pull-from-seedbox
#
# Note: the script name (without .sh) should be unique, as it's used for the log
# file, lockfile, and to identify which line in the crontab to disable.
#
set -eo pipefail

if (( $# == 0 )); then
  exit
fi

export PATH="$HOME/.local/bin:$PATH"

CMD="$1"
ARGS=("${@:2}")

SCRIPT_ID=$(basename "$CMD" .sh)
SCRIPT_NAME=$(title-case "$SCRIPT_ID")
LOG="$HOME/.cache/$SCRIPT_ID.log"
LOG_LINES=3000
LOCKFILE="/tmp/$SCRIPT_ID.lock"

if pgrep -F "$LOCKFILE" &>/dev/null; then
  exit
fi

echo $$ > "$LOCKFILE"
trap 'rm "$LOCKFILE"' EXIT

mkdir -p "$(dirname "$LOG")"
touch "$LOG"
if l=$(wc -l <"$LOG") && (( l > LOG_LINES )); then
  printf '1,$-%sd\nw\n' "$LOG_LINES" | ed -s "$LOG"
fi

if ! "$CMD" "${ARGS[@]}" 2>&1 |
  awk '{ printf "[%s] %s\n", strftime(), $0; fflush(stdout) }' |
  tee -a "$LOG"
then
  title='Cronjob failed'
  message="Logs in ${LOG/$HOME/\~}"

  if [[ $DISABLE_ON_ERROR ]]; then
    title+=' and has been disabled'
    crontab -l | sed "/^[^#].*${SCRIPT_ID/./\\.}.*/s/^/# /" | crontab -
  fi

  notify_send_version=$(notify-send --version)
  if [[ $notify_send_version == *wsl-notify-send* ]]; then
    notify-send --appId "$SCRIPT_NAME" --category "$title" "$message"
  else
    notify-send --category "$SCRIPT_NAME" "$title. $message"
  fi
fi
