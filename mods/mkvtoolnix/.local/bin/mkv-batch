#!/bin/bash
set -eo pipefail

throw() {
  printf '%s: %s\n' "${0##*/}" "$1" >&2
  return 1
}

if [[ $# == 0 || $1 =~ ^(--help|-h)$ ]]; then
  cat >&2 <<'EOF'
Usage: mkv-batch [<path...>] <mkvmerge opts>

Runs mkvmerge on each file, placing output in muxed/. Arguments up until one
beginning with a dash are interpreted as input files; all others are passed to
mkvmerge.

Directories are expanded to contained *.mkv files (non-recursive). If no paths
are given, the current directory is used (equivalent to `mkv-batch *.mkv`).

Common options:

  -a, --audio-tracks [!]TID1,TID2,...     \
  -d, --video-tracks [!]TID1,TID2,...      | Can use lang codes instead.
  -s, --subtitle-tracks [!]TID1,TID2,...  /  Remember to quote/escape the '!'
  --track-order 0:TID1,0:TID2,...
  --default-track-flag TID[:0]
EOF
  printf '\nSee autocomplete suggestions and \e[34m\e]8;;https://mkvtoolnix.download/doc/mkvmerge.html\e\\mkvmerge manual\e]8;;\e\\\e[m.\n' >&2
  exit 1
fi

paths=()
paths_given=
opts=()
while (( $# > 0 )); do
  if [[ $1 == -* ]]; then
    opts=("$@")
    break
  elif [[ -d "$1" ]]; then
    paths+=("$1"/*.mkv)
    paths_given=1
  else
    paths+=("$1")
    paths_given=1
  fi
  shift
done
if [[ ! $paths_given ]]; then
  paths=(*.mkv)
fi
if (( ${#paths[@]} == 0 )); then
  throw 'no files to process'
fi
if (( ${#opts[@]} == 0 )); then
  throw 'no mkvmerge opts given'
fi

mkdir -p muxed

for f in "${paths[@]}"; do
  # Remove crc from remuxed file (could update but it's pretty useless anyway)
  filename=$(basename "$f")
  output="muxed/$(perl -pe 's/ ?\[[a-f0-9]{8}\](?=\.mkv$)//i' <<<"$filename")"

  mkvmerge "${opts[@]}" "$f" -o "$output"
done

mkv-batch-verify
