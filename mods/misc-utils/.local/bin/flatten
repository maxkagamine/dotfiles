#!/bin/bash
#
# Copyright (c) Max Kagamine
# Licensed under the Apache License, Version 2.0
#
set -eo pipefail

# shellcheck source=mods/bash/.local/lib/common.sh
. ~/.local/lib/common.sh

help() {
  cat >&2 <<'EOF'
Usage: flatten [-p|--prefix <prefix>] [-s|--suffix <suffix>]
               [-d|--delimiter <delimiter>] [-n|--dry-run] <directory>

Flattens the contents of a directory "dir" such that "dir/foo/bar/file.jpg" is
renamed to "dir/foo - bar - file.jpg" with the empty directories "bar" and
"foo" removed afterward. Existing files are never overwritten.

Options:

  -p, --prefix <prefix>          Optional string prepended to filenames.

  -s, --suffix <suffix>          Optional string appended to filenames (before
                                 the file extension).

  -d, --delimiter <delimiter>    Separator added between path components.
                                 Defaults to " - ".

  -n, --dry-run                  Show how files would be renamed and exit.
EOF
  exit 1
}

prefix=
suffix=
delimiter=' - '
dry_run=

parse_args \
  -p,--prefix= 'prefix={}' \
  -s,--suffix= 'suffix={}' \
  -d,--delimiter= 'delimiter={}' \
  -n,--dry-run 'dry_run=1' \
  -h,--help \
  -- "$@"

if (( ${#REST[@]} != 1 )); then
  help
elif [[ ! -d ${REST[0]} ]]; then
  throw "not a directory: ${REST[0]}"
fi
directory=${REST[0]}

echo 'Scanning directory...'
file_list=$(cd "$directory" && find . -type f | sed 's/^.\///')
count_not_moved=0

while read -r orig_path; do
  orig_path_without_ext=${orig_path%.*}
  ext=
  if [[ $orig_path == *.* ]]; then
    ext=.${orig_path##*.}
  fi
  new_path="${prefix}${orig_path_without_ext//\//${delimiter}}${suffix}${ext}"

  full_orig_path="$directory/$orig_path"
  full_new_path="$directory/$new_path"

  if [[ $full_orig_path == "$full_new_path" ]]; then
    continue
  fi

  echo

  if [[ -e $full_new_path ]]; then
    printf '\e[31mAlready exists: %s\e[m\n' "$new_path"
    (( count_not_moved += 1 ))
    continue
  fi

  if [[ $dry_run ]]; then
    printf 'Would rename \e[32m%s\e[m\n' "$orig_path"
    printf '          to \e[32m%s\e[m\n' "$new_path"
    continue
  fi

  printf 'Renaming \e[32m%s\e[m\n' "$orig_path"
  printf '      to \e[32m%s\e[m\n' "$new_path"

  # shellcheck disable=SC2312 # Handled by wait $! (bash 4.4+)
  mv -n "$full_orig_path" "$full_new_path" 2> >(sed $'s/.*/\e[31m&\e[m/')
  wait $!
done <<<"$file_list"

echo
if [[ ! $dry_run ]]; then
  echo 'Removing empty directories...'
  find "$directory" -mindepth 1 -depth -type d -empty -exec rmdir -- {} \;
fi
echo 'Done.'

if (( count_not_moved > 0 )); then
  (( count_not_moved == 1 )) && plural= || plural=s
  printf '\n\e[31m%s file%s skipped to avoid overwriting existing files.\e[m\n' "$count_not_moved" "$plural"
fi

exit $((count_not_moved > 255 ? 255 : count_not_moved))
