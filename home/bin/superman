#!/usr/bin/env bash
set -e
set -o pipefail

managers=(apt npm code)
conf=$(realpath "${SUPERMAN_CONFIG:-$HOME/.packages.conf}") # realpath to avoid awk inplace replacing symlink

in-array() {
	# Usage: in-array <search> <array>...
	local x search=$1; shift
	for x in "$@"; do [[ $x == $search ]] && return 0; done
	return 1
}

trace() {
	if [[ $TRACE ]]; then
		printf '\e[1;30msuperman: ' >&2
		if [[ $manager ]]; then printf "($manager) " >&2; fi
		printf "${FUNCNAME[1]#superman-} " >&2
		if (( $# > 0 )); then printf '%q ' "$@" >&2; fi
		printf '\e[m\n' >&2
	fi
}

# Create packages list if not exist
if [[ ! -f $conf ]]; then
	for manager in "${managers[@]}"; do
		printf "[$manager]\n\n" >> "$conf"
	done
fi

# Check for manager
manager=
if in-array "$1" "${managers[@]}"; then
	manager=$1
	shift
fi

# Check for command
cmd=help
if [[ -z $manager ]] && in-array "$1" i install moo || \
   [[ -n $manager ]] && in-array "$1" i install u uninstall ls sync moo; then
	cmd=$1
	shift
	# Expand aliases
	case "$cmd" in
		i) cmd=install ;;
		u) cmd=uninstall ;;
	esac
	# Add subcommands
	if [[ $cmd == 'ls' ]] && in-array "$1" add remove; then
		cmd=$cmd-$1
		shift
	fi
fi

##
## Commands
##

superman-help() {
	cat >&2 <<-EOF
		Usage:

		  superman (i|install)
		    Installs everything in the list for each manager.

		  superman <manager> (i|install) [<pkg>...]
		    Installs one or more packages, or the entire list if none given.

		  superman <manager> (u|uninstall) <pkg>...
		    Uninstalls one or more packages.

		  superman <manager> ls [(add|remove) <pkg>...]
		    Prints the list or adds/removes packages without (un)installing anything.

		  superman <manager> sync
		    Updates the list to reflect currently installed packages.

		Supported managers:

		  $(printf '%s, ' "${managers[@]}" | head -c -2)

		                                        This superman has Super Cow Powers.
	EOF
	return 1
}

superman-install() {
	trace "$@"
	if [[ $manager ]]; then
		# Add specified packages to list, if any
		if (( $# > 0 )); then
			superman-ls-add "$@"
		fi
		# Install specified packages or all in list if none given
		local output pkgs=("$@")
		if (( $# == 0 )); then
			output=$(superman-ls)
			readarray -t pkgs <<< "$output"
			if [[ ${#pkgs[@]} == 1 && ! $pkgs ]]; then pkgs=(); fi
		fi
		if (( ${#pkgs[@]} > 0 )); then
			superman-manager "$manager" install "${pkgs[@]}"
		fi
	elif (( $# == 0 )); then
		# Install everything in list for each manager
		for manager in "${managers[@]}"; do
			manager="$manager" superman-install
		done
	else
		# Command run with packages specified but without manager
		superman-help
	fi
}

superman-uninstall() {
	trace "$@"
	if (( $# > 0 )); then
		superman-manager "$manager" uninstall "$@"
		superman-ls-remove "$@"
	fi
}

superman-ls() {
	trace "$@"
	awk -v section="$manager" -f - "$conf" <<-'EOF'
		in_section && $0 ~ /^(\[.*)?$/ { in_section = 0 }
		in_section { print }
		$0 == "[" section "]" { in_section = 1 }
	EOF
}

superman-ls-add() {
	trace "$@"
	if (( $# > 0 )); then
		if ! grep -Fxq "[$manager]" "$conf"; then
			printf '\n[%s]\n' "$manager" >> "$conf"
		fi
		local items=$(printf '%s\n' "$@")
		awk -i inplace -v section="$manager" -v items="$items" -f - "$conf" <<-'EOF'
			function write_list() {
				asort(list)
				for (i in list) print list[i]
			}
			BEGIN {
				split(items, temp, "\n")
				for (i in temp) list[temp[i]] = temp[i]
			}
			in_section && $0 ~ /^(\[.*)?$/ { in_section = 0; write_list() }
			in_section { list[$0] = $0 }
			!in_section { print }
			$0 == "[" section "]" { in_section = 1 }
			END { if (in_section) write_list() }
		EOF
	fi
}

superman-ls-remove() {
	trace "$@"
	if (( $# > 0 )); then
		local items=$(printf '%s\n' "$@")
		awk -i inplace -v section="$manager" -v items="$items" -f - "$conf" <<-'EOF'
			BEGIN {
				split(items, temp, "\n")
				for (i in temp) list[temp[i]] = temp[i]
			}
			in_section && $0 ~ /^(\[.*)?$/ { in_section = 0 }
			!in_section || !($0 in list) { print }
			$0 == "[" section "]" { in_section = 1 }
		EOF
	fi
}

superman-sync() {
	trace "$@"
	local installed list output add remove
	# Get currently installed packages and packages in list
	installed=$(superman-manager "$manager" list-installed | sort)
	list=$(superman-ls | sort)
	# Get packages that are installed but not in the list
	output=$(comm -13 <(echo "$list") <(echo "$installed"))
	readarray -t add <<< "$output"
	if [[ ${#add[@]} == 1 && ! $add ]]; then add=(); fi
	# Get packages in the list that are not installed
	output=$(comm -23 <(echo "$list") <(echo "$installed"))
	readarray -t remove <<< "$output"
	if [[ ${#remove[@]} == 1 && ! $remove ]]; then remove=(); fi
	# Update list
	superman-ls-add "${add[@]}"
	superman-ls-remove "${remove[@]}"
	# Show diff
	if (( ${#add[@]} > 0 )); then printf '+%s\n' "${add[@]}"; fi
	if (( ${#remove[@]} > 0 )); then printf -- '-%s\n' "${remove[@]}"; fi
}

##
## Managers
##

superman-manager() {
	# Usage: superman-manager <manager> <command> [<args>...]
	local cmd="superman-manager-$1-$2"
	if ! type "$cmd" &>/dev/null; then
		echo "superman: command not implemented for manager '$1'" >&2
		return 1
	elif ! type "$1" &>/dev/null; then
		echo "superman: manager '$1' not found" >&2
		return 1
	fi
	"$cmd" "${@:3}"
}

##
## Manager: apt
##

superman-manager-apt-install() {
	trace "$@"
	apt install -y -- "$@"
}

superman-manager-apt-uninstall() {
	trace "$@"
	apt remove -y -- "$@"
}

##
## Manager: npm
##

superman-manager-npm-install() {
	trace "$@"
	npm install -g -- "$@"
}

superman-manager-npm-uninstall() {
	trace "$@"
	npm uninstall -g -- "$@"
}

##
## Manager: pip
##

# TODO: If superman needed for pip, will need to handle case where superman is
# run with sudo (e.g. via `sudo superman install`); possibly run pip with
# `sudo -u "$SUDO_USER"` and set PATH to include $HOME/.local/bin so that the
# correct version of pip is used.

# superman-manager-pip-install() {
# 	trace "$@"
# 	pip install --user --upgrade -- "$@" | \
# 		{ grep -v 'Requirement already up-to-date' || true; }
# }

# superman-manager-pip-uninstall() {
# 	trace "$@"
# 	pip uninstall -- "$@"
# }

##
## Manager: code
##

superman-manager-code-install() {
	trace "$@"
	local ext
	for ext in "$@"; do
		code --install-extension "$ext" | \
			{ grep -v 'is already installed' || true; }
	done
}

superman-manager-code-uninstall() {
	trace "$@"
	local ext
	for ext in "$@"; do
		code --uninstall-extension "$ext"
	done
}

superman-manager-code-list-installed() {
	trace "$@"
	code --list-extensions
}

##
## Moo
##

superman-moo() {
	local red=$'\e[1;31m'
	local blue=$'\e[1;34m'
	local def=$'\e[m'
	cat <<-EOF

	                  It's a bird!

	    It's a plane!                  It's....

	               ${red}\\^^^^^^^^\\${def}   (__)
	                ${red}\`^^^^^^^^\\\\${def} (oo)
	               *----.${blue}______${red}\\${def}/\\/
	           ${red},__${blue}_____${red}/   ---  ${red}\\${blue}______${def}^
	          ${red},__${blue}______${red}\\   \\S/  ${blue}/\\_____${def}^
	                    ${blue}\\______/${def}

	                       supercow!

	EOF
}

# Run command
"superman-$cmd" "$@"
